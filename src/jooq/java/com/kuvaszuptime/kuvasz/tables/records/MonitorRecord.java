/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables.records;


import com.kuvaszuptime.kuvasz.tables.Monitor;

import java.time.OffsetDateTime;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "monitor", uniqueConstraints = {
    @UniqueConstraint(name = "monitor_pkey", columnNames = {"id"}),
    @UniqueConstraint(name = "unique_monitor_name", columnNames = {"name"})
})
public class MonitorRecord extends UpdatableRecordImpl<MonitorRecord> implements Record7<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1383018433;

    /**
     * Setter for <code>monitor.id</code>.
     */
    public MonitorRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>monitor.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 32)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>monitor.name</code>. Monitor's name
     */
    public MonitorRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>monitor.name</code>. Monitor's name
     */
    @Column(name = "name", nullable = false, length = 255)
    @NotNull
    @Size(max = 255)
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>monitor.url</code>. URL to check
     */
    public MonitorRecord setUrl(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>monitor.url</code>. URL to check
     */
    @Column(name = "url", nullable = false)
    @NotNull
    public String getUrl() {
        return (String) get(2);
    }

    /**
     * Setter for <code>monitor.uptime_check_interval</code>. Uptime checking interval in seconds
     */
    public MonitorRecord setUptimeCheckInterval(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>monitor.uptime_check_interval</code>. Uptime checking interval in seconds
     */
    @Column(name = "uptime_check_interval", nullable = false, precision = 32)
    @NotNull
    public Integer getUptimeCheckInterval() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>monitor.enabled</code>. Flag to toggle the monitor
     */
    public MonitorRecord setEnabled(Boolean value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>monitor.enabled</code>. Flag to toggle the monitor
     */
    @Column(name = "enabled", nullable = false)
    public Boolean getEnabled() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>monitor.created_at</code>.
     */
    public MonitorRecord setCreatedAt(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>monitor.created_at</code>.
     */
    @Column(name = "created_at", nullable = false)
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>monitor.updated_at</code>.
     */
    public MonitorRecord setUpdatedAt(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>monitor.updated_at</code>.
     */
    @Column(name = "updated_at")
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Monitor.MONITOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Monitor.MONITOR.NAME;
    }

    @Override
    public Field<String> field3() {
        return Monitor.MONITOR.URL;
    }

    @Override
    public Field<Integer> field4() {
        return Monitor.MONITOR.UPTIME_CHECK_INTERVAL;
    }

    @Override
    public Field<Boolean> field5() {
        return Monitor.MONITOR.ENABLED;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return Monitor.MONITOR.CREATED_AT;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return Monitor.MONITOR.UPDATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getUrl();
    }

    @Override
    public Integer component4() {
        return getUptimeCheckInterval();
    }

    @Override
    public Boolean component5() {
        return getEnabled();
    }

    @Override
    public OffsetDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime component7() {
        return getUpdatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getUrl();
    }

    @Override
    public Integer value4() {
        return getUptimeCheckInterval();
    }

    @Override
    public Boolean value5() {
        return getEnabled();
    }

    @Override
    public OffsetDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public OffsetDateTime value7() {
        return getUpdatedAt();
    }

    @Override
    public MonitorRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public MonitorRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public MonitorRecord value3(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public MonitorRecord value4(Integer value) {
        setUptimeCheckInterval(value);
        return this;
    }

    @Override
    public MonitorRecord value5(Boolean value) {
        setEnabled(value);
        return this;
    }

    @Override
    public MonitorRecord value6(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public MonitorRecord value7(OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public MonitorRecord values(Integer value1, String value2, String value3, Integer value4, Boolean value5, OffsetDateTime value6, OffsetDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MonitorRecord
     */
    public MonitorRecord() {
        super(Monitor.MONITOR);
    }

    /**
     * Create a detached, initialised MonitorRecord
     */
    public MonitorRecord(Integer id, String name, String url, Integer uptimeCheckInterval, Boolean enabled, OffsetDateTime createdAt, OffsetDateTime updatedAt) {
        super(Monitor.MONITOR);

        set(0, id);
        set(1, name);
        set(2, url);
        set(3, uptimeCheckInterval);
        set(4, enabled);
        set(5, createdAt);
        set(6, updatedAt);
    }
}
