/*
 * This file is generated by jOOQ.
 */
package com.kuvaszuptime.kuvasz.tables;


import com.kuvaszuptime.kuvasz.DefaultSchema;
import com.kuvaszuptime.kuvasz.Keys;
import com.kuvaszuptime.kuvasz.tables.records.MonitorRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Monitor extends TableImpl<MonitorRecord> {

    private static final long serialVersionUID = 1271016748;

    /**
     * The reference instance of <code>monitor</code>
     */
    public static final Monitor MONITOR = new Monitor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MonitorRecord> getRecordType() {
        return MonitorRecord.class;
    }

    /**
     * The column <code>monitor.id</code>.
     */
    public final TableField<MonitorRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('kuvasz.monitor_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>monitor.name</code>. Monitor's name
     */
    public final TableField<MonitorRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "Monitor's name");

    /**
     * The column <code>monitor.url</code>. URL to check
     */
    public final TableField<MonitorRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "URL to check");

    /**
     * The column <code>monitor.uptime_check_interval</code>. Uptime checking interval in seconds
     */
    public final TableField<MonitorRecord, Integer> UPTIME_CHECK_INTERVAL = createField(DSL.name("uptime_check_interval"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Uptime checking interval in seconds");

    /**
     * The column <code>monitor.enabled</code>. Flag to toggle the monitor
     */
    public final TableField<MonitorRecord, Boolean> ENABLED = createField(DSL.name("enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Flag to toggle the monitor");

    /**
     * The column <code>monitor.created_at</code>.
     */
    public final TableField<MonitorRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>monitor.updated_at</code>.
     */
    public final TableField<MonitorRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>monitor.ssl_check_enabled</code>.
     */
    public final TableField<MonitorRecord, Boolean> SSL_CHECK_ENABLED = createField(DSL.name("ssl_check_enabled"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>monitor</code> table reference
     */
    public Monitor() {
        this(DSL.name("monitor"), null);
    }

    /**
     * Create an aliased <code>monitor</code> table reference
     */
    public Monitor(String alias) {
        this(DSL.name(alias), MONITOR);
    }

    /**
     * Create an aliased <code>monitor</code> table reference
     */
    public Monitor(Name alias) {
        this(alias, MONITOR);
    }

    private Monitor(Name alias, Table<MonitorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Monitor(Name alias, Table<MonitorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Monitor(Table<O> child, ForeignKey<O, MonitorRecord> key) {
        super(child, key, MONITOR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MonitorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MONITOR;
    }

    @Override
    public UniqueKey<MonitorRecord> getPrimaryKey() {
        return Keys.MONITOR_PKEY;
    }

    @Override
    public List<UniqueKey<MonitorRecord>> getKeys() {
        return Arrays.<UniqueKey<MonitorRecord>>asList(Keys.MONITOR_PKEY, Keys.UNIQUE_MONITOR_NAME);
    }

    @Override
    public Monitor as(String alias) {
        return new Monitor(DSL.name(alias), this);
    }

    @Override
    public Monitor as(Name alias) {
        return new Monitor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Monitor rename(String name) {
        return new Monitor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Monitor rename(Name name) {
        return new Monitor(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, Boolean, OffsetDateTime, OffsetDateTime, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
